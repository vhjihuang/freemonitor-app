FreeMonitor开发路线图:
    ☐ 阶段一：认证系统完善 [95% 完成]
    ☐ 阶段二：核心监控功能 [85% 完成]
    ☐ 阶段三：数据展示与处理 [30% 完成]
    ☐ 阶段四：用户体验优化 [60% 完成]
    ☐ 阶段五：API 与数据流 [75% 完成]
    ☐ 阶段六：后端服务完善 [70% 完成]
    ☐ 阶段七：安全增强 [80% 完成]
    ☐ 阶段八：测试与质量 [55% 完成]
    ☐ 阶段九：部署与运维 [30% 完成]

todos:
    ✔ 阶段一：认证系统完善 [80% 完成]: @done(25-09-14 16:57)
        后端认证 🔴
            ✔ 修复 dev-auth.guard.ts 配置问题 @done(25-09-14 16:40)
                状态: 已完成
                描述: 为开发环境创建专用认证守卫，保持生产环境 JWT 认证不变
                实现逻辑: 创建 DevAuthGuard -> 开发环境自动注入测试用户 -> 根据环境变量切换认证方式
                相关文件: apps/backend/src/auth/dev-auth.guard.ts, apps/backend/src/auth/auth.module.ts
                验收标准: 
                - 开发环境访问 /api/users/me 无需 JWT 令牌，返回测试用户数据
                - 生产环境访问相同端点必须提供有效 JWT，否则返回 401
                - 环境变量 NODE_ENV=development 时启用开发模式
                - 单元测试覆盖率 > 90%，包含守卫逻辑测试
                更新方式: 无需进一步更新，已完成

            ✔ 完善 auth.service.ts 登录逻辑 @done(25-09-14 16:41)
                状态: 已完成
                描述: 实现用户凭据验证和双令牌机制
                实现逻辑: 接收邮箱和密码 -> 查询数据库 -> 验证密码哈希 -> 生成 JWT 访问和刷新令牌
                相关文件: apps/backend/src/auth/auth.service.ts
                验收标准: 
                - 登录成功返回包含 accessToken 和 refreshToken 的 JSON 响应
                - accessToken 有效期 15 分钟，refreshToken 有效期 7 天
                - 错误密码返回 401 状态码和 "Invalid credentials" 消息
                - 不存在的邮箱返回 404 状态码和 "User not found" 消息
                - 响应时间 < 500ms，支持 100 并发用户
                更新方式: 无需进一步更新，已完成

        ✔ 实现 JWT 策略验证
            状态: 已完成
            描述: 创建 JwtStrategy 处理 JWT 验证
            实现逻辑: 从请求头提取 JWT -> 验证有效性 -> 查询用户信息并附加到请求
            相关文件: apps/backend/src/auth/jwt.strategy.ts
>            验收标准: 
>            - 有效 JWT 返回包含用户 ID、邮箱、角色等信息的用户对象
>            - 无效 JWT（过期、格式错误、签名无效）返回 401 Unauthorized
>            - 缺少 Authorization 头返回 401 Unauthorized
>            - JWT payload 包含标准声明（iat, exp, sub）和自定义声明（email, role）
>            - 支持 Bearer Token 格式：Authorization: Bearer <token>
            更新方式: 无需进一步更新，已完成

        ✔ 添加刷新令牌端点
            状态: 已完成
            描述: 创建 /auth/refresh 端点延续会话
            实现逻辑: 接收刷新令牌 -> 验证有效性 -> 生成新访问令牌
            相关文件: apps/backend/src/auth/auth.controller.ts
>            验收标准: 
>            - 有效刷新令牌返回新的 accessToken，refreshToken 保持不变
>            - 刷新令牌过期返回 401 状态码和 "Refresh token expired" 消息
>            - 无效刷新令牌格式返回 401 状态码和 "Invalid refresh token" 消息
>            - 新 accessToken 有效期重置为 15 分钟
>            - 支持并发刷新请求，无竞态条件
            更新方式: 无需进一步更新，已完成

        ✔ 创建用户注册服务
            状态: 已完成
            描述: 实现 /auth/register 端点
            实现逻辑: 验证邮箱唯一性 -> 加密密码 -> 创建用户 -> 返回认证信息
            相关文件: apps/backend/src/auth/auth.controller.ts, apps/backend/src/auth/auth.service.ts
>            验收标准: 
>            - 成功注册返回包含 accessToken 和 refreshToken 的 JSON 响应
>            - 邮箱重复返回 409 状态码和 "Email already exists" 消息
>            - 密码强度验证：最少 8 字符，包含大小写字母、数字和特殊字符
>            - 邮箱格式验证：符合 RFC 5322 标准格式
>            - 用户名长度限制：3-50 个字符，仅支持字母、数字、空格、下划线和连字符
            更新方式: 无需进一步更新，已完成

        ✔ 添加密码重置功能
            状态: 已完成
            描述: 实现密码重置流程
            实现逻辑: 生成重置令牌 -> 保存到数据库 -> 用户通过令牌重置密码 -> 清除令牌
            相关文件: apps/backend/src/auth/auth.controller.ts (L37-L47, L75-L85), apps/backend/src/auth/auth.service.ts (L167-L212)
>            验收标准: 
>            - 有效令牌在 1 小时内可重置密码，重置后令牌立即失效
>            - 令牌过期返回 403 状态码和 "Reset token expired" 消息
>            - 无效令牌返回 403 状态码和 "Invalid reset token" 消息
>            - 新密码必须满足强度要求：最少 8 字符，包含大小写字母、数字和特殊字符
>            - 密码重置成功后发送确认邮件到用户邮箱
            更新方式: 无需进一步更新，已完成

        ✔ 实现密码重置邮件发送功能
            状态: 已完成
            描述: 集成邮件服务发送密码重置链接
            实现逻辑: 生成重置令牌 -> 构造链接 -> 调用邮件服务 -> 输出到控制台（待集成真实服务）
            相关文件: apps/backend/src/auth/auth.service.ts (L199)
            子任务:
                - 创建邮件服务框架 (MailService, MailModule)
                - 集成真实邮件服务
                - 候选: Nodemailer, SendGrid
                - 决策标准: 成本、送达率、TypeScript 支持
                - 阻碍: 待确认邮件服务提供商
                - 添加邮件模板系统
                - 实现错误处理和重试机制
            验收标准: 
                - 邮件在 5 秒内发送到用户邮箱，控制台显示完整邮件内容
                - 邮件包含有效的密码重置链接，格式为：https://app.com/reset-password?token=<uuid>
                - 邮件主题："FreeMonitor 密码重置请求"
                - 邮件正文包含用户名、重置链接有效期（1小时）说明
                - 邮件发送失败时记录错误日志，包含错误详情和时间戳
            依赖: 创建邮件服务框架（已完成）
            更新方式: 完成任务后，编辑 TODO.md 将 [~] 改为 [x]，并在变更日志中记录

        ✔ 实现权限系统 🔴
            状态: 已完成
            描述: 创建基于角色的权限控制系统
            实现逻辑: 定义角色枚举 -> 创建 Roles 装饰器 -> 实现 RolesGuard -> 注册守卫 -> 应用到路由 -> 测试验证
            相关文件: 
              - packages/types/src/roles.ts (Role 枚举)
              - apps/backend/src/auth/decorators/roles.decorator.ts (Roles 装饰器)
              - apps/backend/src/auth/guards/roles.guard.ts (RolesGuard 守卫)
              - apps/backend/src/auth/auth.module.ts (注册守卫)
              - apps/backend/src/auth/guards/dev-auth.guard.ts (更新 DevAuthGuard 以支持角色)
              - apps/backend/src/auth/auth.controller.ts (示例用法)
              - apps/backend/src/config/jwt.config.ts (支持角色配置)
            子任务:
                [x] 定义角色枚举 (packages/types/src/roles.ts)
                [x] 创建 Roles 装饰器
                [x] 实现 RolesGuard 守卫
                [x] 在 AuthModule 注册守卫
                [x] 应用 Roles 装饰器到路由
                [x] 测试受保护路由访问控制
                [x] 验证开发环境默认用户权限
            验收标准: 
            - ADMIN 角色用户可访问所有受保护路由
            - USER 角色用户仅能访问 /api/devices/* 和 /api/users/me 路由
            - 无角色或错误角色访问受保护路由返回 403 Forbidden
            - 开发环境默认用户自动获得 ADMIN 角色
            - 角色验证在 JWT payload 中通过 role 字段传递
            - 支持角色继承：ADMIN 可访问所有 USER 权限路由

        ⏸ 扩展优化角色权限系统 🔴
            状态: 待开始
            描述: 扩展和优化现有的角色权限控制系统，使其在实际业务中发挥更大作用
            实现逻辑: 扩展应用范围 -> 完善用户角色管理 -> 细化权限控制 -> 前端权限展示
            相关文件: 
              - packages/types/src/roles.ts (已更新添加VIEWER角色)
              - apps/backend/src/users/ (待实现用户角色管理)
              - apps/backend/src/devices/ (待实现设备管理权限)
              - apps/frontend/src/components/ (待实现前端权限展示)

        ☐ 后端认证系统优化 🔴
            状态: 待开始
            描述: 优化后端认证安全性、会话管理和错误处理
            实现逻辑: 改进 token 存储与验证 -> 增强会话安全性 -> 优化错误处理
            相关文件: 
              - apps/backend/src/auth/auth.service.ts
              - apps/backend/src/auth/auth.controller.ts
              - apps/backend/src/auth/jwt.strategy.ts
              - apps/backend/src/auth/dev-auth.guard.ts
              - apps/backend/src/config/jwt.config.ts
            子任务:
                [x] 实现 refresh token 数据库存储：将 refresh token 存储在数据库中并与用户关联
                [x] 添加 token 黑名单机制：实现已撤销/过期 token 的黑名单管理
                [ ] 增强开发环境配置：提供开发环境下的认证行为配置选项
                [ ] 添加详细的日志记录：记录认证关键操作和错误信息
                [ ] 完善错误处理和状态码：确保统一的错误响应格式
            验收标准: 
            - refresh token 存储在数据库中，支持查询、更新和删除
            - 被撤销的 token 能被正确识别并拒绝访问
            - 开发环境下可以通过配置控制认证行为，如启用/禁用 DevAuthGuard
            - 所有认证相关操作都有详细的日志记录，包含时间戳、用户信息和操作结果
            - 统一使用 { success: boolean, data?: any, error?: { code: string, message: string } } 格式的响应
            负责人: 开发团队
            更新方式: 完成子任务后，编辑 TODO.todo 将 [ ] 改为 [x]，并在变更日志中记录
            子任务:
                [ ] 扩展应用范围：将角色权限控制应用到所有核心业务API控制器
                [ ] 完善用户角色管理：实现用户角色分配和修改功能
                [ ] 细化权限控制：实现更细粒度的权限控制，如基于资源和操作类型的权限
                [ ] 前端权限展示：根据用户角色动态展示或隐藏相关功能模块
            验收标准: 
            - 所有核心API端点都应用了适当的角色权限控制
            - 管理员可以管理用户角色（分配、修改、查看）
            - 支持更细粒度的权限控制，如特定操作的权限
            - 前端界面根据用户角色动态展示可用功能
            - 权限变更立即生效，无需重启服务
            负责人: 开发团队
            更新方式: 已完成任务，编辑 TODO.todo 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[前端登录页面] -->|HTTP请求| B[AuthController]
                B -->|调用| C[AuthService]
                C -->|使用| D[JwtService]
                C -->|查询| E[User表]
                C -->|返回结果| F[AuthContext]
                F -->|全局共享| G[其他页面组件]

    前端认证 🔴
        ✔ 完善登录页面功能
            状态: 已完成
            描述: 实现登录表单和后端 API 集成
            实现逻辑: 用户输入邮箱和密码 -> 前端验证 -> 调用登录接口 -> 存储令牌 -> 跳转仪表板
            相关文件: apps/frontend/src/components/auth/LoginForm.tsx (L1-L115)
            验收标准: 
            - 登录成功 1 秒内重定向到 /dashboard 页面
            - 错误密码显示红色提示 "邮箱或密码错误"
            - 网络错误显示 "网络连接失败，请检查网络"
            - 表单验证错误在对应字段下方显示红色提示
            - 加载状态显示旋转图标，禁用提交按钮
            - 支持 Enter 键提交表单
            更新方式: 无需进一步更新，已完成

        ☐ 前端认证系统优化
            状态: 待开始
            描述: 优化前端认证安全性、一致性和用户体验
            实现逻辑: 改进 token 存储方式 -> 统一认证状态管理 -> 增强安全防护
            相关文件: 
              - apps/frontend/src/lib/auth.ts
              - apps/frontend/src/lib/useAuth.ts
              - apps/frontend/src/lib/api.ts
            子任务:
                [ ] 前端存储安全优化：将 token 从 localStorage 迁移到 HttpOnly Cookie 或 Secure Cookie
                [ ] 认证状态同步机制统一：解决不同组件中登出逻辑不一致的问题
                [ ] 添加 CSRF 保护：实现 CSRF 令牌机制
                [ ] 重定向方式统一：统一前端页面重定向的实现方式
                [ ] 错误处理完善：改进错误信息的显示和处理逻辑
            验收标准: 
            - token 存储在更安全的 HttpOnly Cookie 中
            - 所有组件的登出操作行为一致，均能正确清除认证状态并跳转到登录页
            - 实现 CSRF 令牌的生成、传递和验证
            - 统一使用框架提供的重定向机制，如 Next.js 的 redirect 函数
            - 错误信息显示更友好，包含重试选项
            依赖: 后端支持相应的 Cookie 设置和 CSRF 保护机制
            更新方式: 完成子任务后，编辑 TODO.todo 将 [ ] 改为 [x]，并在变更日志中记录

        ✔ 实现注册页面
            状态: 已完成
            描述: 创建注册表单并集成后端 API
            实现逻辑: 用户填写注册信息 -> 前端验证 -> 调用注册接口 -> 存储令牌 -> 跳转仪表板
            相关文件: apps/frontend/src/components/auth
            验收标准: 成功注册跳转仪表板，错误时显示提示
            更新方式: 无需进一步更新，已完成

        ✔ 添加忘记密码页面
            状态: 已完成
            描述: 实现密码重置请求页面
            实现逻辑: 用户输入邮箱 -> 调用重置接口 -> 显示成功提示
            相关文件: apps/frontend/src/app/auth/forgot-password/page.tsx (L1-L120)
            验收标准: 提交邮箱后显示成功提示，错误时显示提示
            更新方式: 无需进一步更新，已完成

        ✔ 创建认证上下文提供者
            状态: 已完成
            描述: 实现全局认证状态管理
            实现逻辑: 创建 AuthContext 和 useAuth Hook -> 提供登录、登出、用户信息方法
            相关文件: apps/frontend/src/app/auth
            验收标准: 全局共享认证状态，方法正常工作
            更新方式: 无需进一步更新，已完成

        ✔ 实现路由守卫组件 🔴
            状态: 已完成
            描述: 保护受限路由，防止未认证访问
            实现逻辑: 创建 AuthGuard -> 检查认证状态 -> 未认证重定向登录页
            相关文件: apps/frontend/src/components/auth
            验收标准: 未认证用户重定向登录页，认证用户可访问
            依赖: 创建认证上下文提供者（已完成）
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ✔ 添加加载状态处理
            状态: 已完成
            描述: 显示表单提交加载状态
            实现逻辑: 表单提交时显示加载指示器 -> 请求完成隐藏
            相关文件: apps/frontend/src/components/auth/LoginForm.tsx (L27, L64)
            验收标准: 提交时显示加载指示器，完成后隐藏
            更新方式: 无需进一步更新，已完成

        ✔ 完善错误处理显示
            状态: 已完成
            描述: 统一错误信息显示和自动清除
            实现逻辑: 捕获 API 错误 -> 格式化显示 -> 自动清除
            相关文件: apps/frontend/src/components/auth/LoginForm.tsx (L85-L100)
            验收标准: 错误信息清晰显示并在适当时间清除
            更新方式: 无需进一步更新，已完成

        模块关系图:
            graph TD
                A[前端页面组件] -->|使用| B[AuthContext]
                B -->|访问方法| C[AuthProvider]
                C -->|调用方法| D[useAuth]
                D -->|认证方法| E[登录/注册表单]
                E -->|用户凭证| F[API客户端]
                F -->|HTTP请求| G[后端认证API]
                G -->|认证结果| H[认证服务]

    文档与测试 🟡
        ☐ 更新项目 README
            状态: 未开始
            描述: 完善项目介绍和设置指南
            实现逻辑: 编写项目概述 -> 提供安装步骤 -> 添加使用说明
            相关文件: README.md
>            验收标准: 
>            - 提供一键安装脚本：./scripts/setup.sh 自动完成环境配置
>            - 包含 Docker 和本地两种安装方式，步骤不超过 5 步
>            - 提供常见问题 FAQ，涵盖 90% 可能遇到的安装问题
>            - 包含环境变量配置模板，提供 .env.example 文件
>            - 提供验证命令：npm run health-check 检查安装是否成功
>            - 包含截图和 GIF 动画演示关键步骤
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 编写认证服务单元测试
            状态: 未开始
            描述: 为认证服务编写单元测试
            实现逻辑: 测试登录、注册、密码重置功能
            相关文件: apps/backend/src/auth/*.spec.ts
>            验收标准: 
>            - 单元测试覆盖率 > 85%，包含所有认证服务方法
>            - 关键路径测试：登录成功、登录失败、密码重置流程、角色权限验证
>            - 边界条件测试：空输入、超长字符串、特殊字符处理
>            - 异常处理测试：数据库连接失败、JWT 签名错误、用户不存在
>            - 使用 Jest 覆盖率报告，生成 HTML 报告到 coverage/ 目录
>            - 所有测试通过 CI/CD 管道，失败时阻止合并
            依赖: 后端认证任务完成
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

阶段二：核心监控功能 [70% 完成]
    仪表盘 🟡
        ✔ 创建仪表盘布局组件
            状态: 已完成
            描述: 提供应用主界面框架
            实现逻辑: 创建导航栏、侧边栏、页面标题和内容区域
            相关文件: apps/frontend/src/app/dashboard
            验收标准: 仪表盘布局正确显示，导航功能正常
            更新方式: 无需进一步更新，已完成

        ☐ 实现状态概览卡片
            状态: 未开始
            描述: 显示设备状态关键指标
            实现逻辑: 从后端获取数据 -> 展示卡片 -> 定期更新
            相关文件: apps/frontend/src/app/dashboard, apps/backend/src/dashboard
>            验收标准: 
>            - 显示在线设备数、离线设备数、总设备数三个核心指标卡片
>            - 数据每 5 秒自动刷新，使用 WebSocket 或轮询机制
>            - 在线设备显示绿色图标，离线设备显示红色图标，数字清晰可见
>            - 支持手动刷新按钮，点击后立即更新数据
>            - 加载状态显示骨架屏，错误状态显示重试按钮
>            - 响应式设计：移动端卡片垂直排列，桌面端水平排列
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 添加实时数据图表
            状态: 未开始
            描述: 可视化设备指标数据
            实现逻辑: 选择图表库 -> 渲染图表 -> 实现定时刷新
            相关文件: apps/frontend/src/app/dashboard
            子任务:
                - 选择图表库（候选：Chart.js、Recharts）
                - 实现 WebSocket 数据流
                - 提供轮询 fallback
            验收标准: 
            - 支持折线图、柱状图、面积图三种可视化类型
            - 时间范围选择：最近1小时、6小时、24小时、7天、30天
            - 数据刷新频率：实时模式每5秒，历史模式每30秒
            - 支持CPU、内存、磁盘、网络四种指标切换显示
            - 图表支持缩放、平移、数据点悬停显示详细信息
            - 无数据时显示友好提示，支持导出PNG和CSV格式
            - 响应时间 < 1秒，支持1000个数据点流畅渲染
            更新方式: 完成子任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 创建最近告警面板
            状态: 未开始
            描述: 显示最新告警信息
            实现逻辑: 获取告警列表 -> 显示状态 -> 提供详情查看
            相关文件: apps/frontend/src/app/dashboard, apps/backend/src/dashboard
            验收标准: 
            - 显示最新 10 条告警，按时间倒序排列，包含分页导航
            - 告警信息包含：设备名称、告警类型、严重程度、发生时间、状态
            - 严重程度用颜色区分：Critical(红色)、Warning(橙色)、Info(蓝色)
            - 点击告警行展开显示完整详情，包括告警描述和建议解决方案
            - 支持按设备、类型、严重程度、时间范围进行过滤
            - 空状态显示"暂无告警"图标和提示文字
            - 响应时间 < 500ms，支持1000条告警数据快速过滤
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 实现数据刷新机制
            状态: 未开始
            描述: 优化数据刷新性能
            实现逻辑: 设置定时器 -> 提供手动刷新 -> 优化请求频率
            相关文件: apps/frontend/src/app/dashboard
            验收标准: 数据每 5 秒刷新，手动刷新正常工作
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[仪表盘页面] -->|请求数据| B[仪表盘控制器]
                B -->|获取数据| C[服务层]
                C -->|查询数据库| D[PrismaService]
                D -->|设备/指标/告警| E[数据库表]
                A -->|展示数据| F[状态概览卡片]
                A -->|展示数据| G[实时数据图表]
                A -->|展示数据| H[最近告警面板]

    设备管理 🔴
        ✔ 完善设备列表页面
            状态: 已完成
            描述: 显示设备信息并支持分页
            实现逻辑: 获取设备列表 -> 展示信息 -> 支持分页和状态显示
            相关文件: apps/frontend/src/app/devices, apps/backend/src/devices
            验收标准: 
            - 每页显示 10 条设备记录，支持翻页导航
            - 设备状态实时显示：在线（绿色）、离线（红色）、未知（灰色）
            - 支持按设备名称、IP 地址、状态进行搜索过滤
            - 分页响应时间 < 500ms，支持 1000+ 设备数据
            - 表格列包含：名称、IP、状态、最后在线时间、操作按钮
            - 空数据状态显示 "暂无设备" 提示和添加按钮
            更新方式: 无需进一步更新，已完成

        ✔ 创建设备详情页面
            状态: 已完成
            描述: 显示设备详细信息和告警历史
            实现逻辑: 根据 ID 获取信息 -> 显示指标和告警
            相关文件: apps/frontend/src/app/devices
            验收标准: 显示设备详情、指标和告警历史
            更新方式: 无需进一步更新，已完成

        ✔ 实现设备添加表单
            状态: 已完成
            描述: 创建新设备
            实现逻辑: 用户填写信息 -> 前端验证 -> 调用创建接口
            相关文件: apps/frontend/src/app/devices
            验收标准: 成功添加设备，列表自动更新
            更新方式: 无需进一步更新，已完成

        ✔ 添加设备编辑功能
            状态: 已完成
            描述: 编辑设备信息
            实现逻辑: 显示当前信息 -> 用户修改 -> 调用更新接口
            相关文件: apps/frontend/src/app/devices
            验收标准: 成功编辑设备，显示更新结果
            更新方式: 无需进一步更新，已完成

        ✔ 实现设备删除操作
            状态: 已完成
            描述: 删除设备并更新列表
            实现逻辑: 显示确认对话框 -> 调用删除接口 -> 更新列表
            相关文件: apps/frontend/src/app/devices
            验收标准: 设备删除后列表更新，显示成功提示
            更新方式: 无需进一步更新，已完成

        ✔ 添加设备搜索过滤
            状态: 已完成
            描述: 支持设备搜索和过滤
            实现逻辑: 提供搜索输入 -> 发送搜索请求 -> 显示结果
            相关文件: apps/frontend/src/app/devices
            验验标准: 
            - 支持按设备名称模糊搜索（包含匹配），响应时间 < 300ms
            - 支持按IP地址精确搜索和IP段范围搜索
            - 支持按状态过滤：全部、在线、离线、未知状态
            - 支持多条件组合搜索：名称+状态、IP+状态等
            - 搜索结果为空时显示"无匹配设备"提示和清除搜索按钮
            - 搜索输入框支持实时搜索，输入延迟300ms后自动触发
            - 支持搜索关键字高亮显示，匹配数量实时显示
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[前端设备管理页面] -->|HTTP请求| B[DevicesController]
                B -->|API调用| C[DevicesService]
                C -->|使用| D[PrismaService]
                D -->|数据库操作| E[Device表]
                A -->|获取/更新状态| F[useDevices Hook]
                F -->|数据传输| G[设备数据模型]
                G -->|操作| H[Device DTO]

阶段三：数据展示与处理 [30% 完成]
    指标处理 🟡
        ✔ 实现指标数据收集服务
            状态: 已完成
            描述: 收集和存储设备指标数据
            实现逻辑: 接收设备数据 -> 验证格式 -> 存储数据库
            相关文件: apps/backend/src/devices, packages/types/src/metric.types.ts
            验收标准: 指标数据正确存储，查询接口可用
            更新方式: 无需进一步更新，已完成

        ☐ 创建指标查询接口
            状态: 未开始
            描述: 提供指标数据查询 API
            实现逻辑: 接收查询参数 -> 获取数据 -> 支持分页和排序
            相关文件: apps/backend/src/devices
            验收标准: 
            - 支持按时间戳、CPU使用率、内存使用率、磁盘使用率排序
            - 默认排序：时间戳倒序，最新数据在前
            - 分页参数：page(默认1)、limit(默认20，最大100)、sortBy、sortOrder
            - 响应时间 < 500ms，支持10000条数据快速分页
            - 返回数据包含：设备ID、时间戳、CPU、内存、磁盘、网络指标
            - 支持时间范围过滤：startTime、endTime参数，精确到秒
            - 支持设备ID过滤，可同时查询多个设备的指标数据
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 添加历史数据存储
            状态: 未开始
            描述: 存储和归档历史指标数据
            实现逻辑: 设计历史数据表 -> 存储数据 -> 提供查询接口
            相关文件: apps/backend/src/devices, schema.prisma
            验收标准: 
            - 历史数据保留策略：热数据7天（高频查询），温数据30天（中频查询），冷数据1年（归档存储）
            - 支持按日、周、月、年时间维度聚合查询，聚合函数包含avg、max、min、count
            - 数据压缩率 > 70%，1亿条历史数据存储空间 < 1GB
            - 查询响应时间：热数据 < 100ms，温数据 < 500ms，冷数据 < 2s
            - 支持批量导出CSV格式，单次导出上限100万条记录
            - 自动归档任务每日凌晨2点执行，归档失败时发送邮件通知
            - 提供归档状态API接口，可查询归档进度和失败记录
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 实现数据聚合功能
            状态: 未开始
            描述: 支持指标数据聚合计算
            实现逻辑: 获取数据 -> 按时间窗口分组 -> 计算聚合值
            相关文件: apps/backend/src/devices
            验收标准: 
            - 支持时间窗口聚合：1分钟、5分钟、15分钟、1小时、6小时、1天
            - 聚合函数：avg(平均值)、max(最大值)、min(最小值)、sum(求和)、count(计数)
            - 支持多指标同时聚合：CPU、内存、磁盘、网络可同时计算
            - 聚合精度误差 < 0.1%，100万条数据聚合计算时间 < 1秒
            - 支持自定义时间范围聚合，开始和结束时间精确到分钟
            - 返回格式包含：聚合时间戳、设备ID、指标名称、聚合值、数据点数
            - 支持聚合结果缓存，相同查询5分钟内直接返回缓存数据
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 添加数据清理策略
            状态: 未开始
            描述: 自动清理过期数据
            实现逻辑: 定义过期规则 -> 定期清理 -> 提供配置选项
            相关文件: apps/backend/src/devices
            验收标准: 
            - 清理策略：指标数据保留30天，告警数据保留90天，日志数据保留7天
            - 自动清理任务每日凌晨3点执行，清理过程不影响正常业务
            - 清理前自动备份，备份保留7天，支持数据恢复
            - 清理效率：100万条数据删除时间 < 30秒
            - 存储空间回收率 > 80%，清理后数据库空间自动收缩
            - 清理日志记录：包含清理时间、清理数量、剩余空间、执行状态
            - 支持手动触发清理，提供清理预览功能（显示将清理的数据量）
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[设备端] -->|数据发送| B[指标收集服务接口]
                B -->|存储指标数据| C[指标数据表]
                C -->|查询/聚合| D[指标查询接口]
                C -->|查询/聚合| E[数据聚合服务]
                C -->|查询/聚合| F[告警创建逻辑]
                D -->|展示数据| G[前端图表展示]
                F -->|触发告警| H[告警记录表]
                H -->|通知| I[告警通知服务]

    告警系统 🟡
        ✔ 完善告警创建逻辑
            状态: 已完成
            描述: 根据指标触发告警
            实现逻辑: 接收指标 -> 判断规则 -> 创建并存储告警
            相关文件: apps/backend/src/devices, packages/types/src/alert.types.ts
            验收标准: 告警正确触发并存储
            更新方式: 无需进一步更新，已完成

        ☐ 实现告警查询接口
            状态: 已完成
            描述: 提供告警数据查询 API
            实现逻辑: 接收查询参数 -> 获取告警数据 -> 支持过滤和排序
            相关文件: apps/backend/src/devices
            验收标准: 
            - 支持按告警级别过滤：Critical、Warning、Info，可多选组合
            - 支持按设备名称、告警类型、时间范围进行过滤搜索
            - 排序选项：按发生时间（默认倒序）、按严重程度、按设备名称字母序
            - 分页参数：page(默认1)、limit(默认10，最大50)、sortBy、sortOrder
            - 响应时间 < 300ms，支持10000条告警数据快速过滤 ✅ (实测性能: 2-6ms)
            - 返回告警信息包含：ID、设备名称、类型、级别、描述、发生时间、状态
            - 支持告警统计信息：总数、各级别数量、各设备告警数量
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ✔ 添加告警确认功能
            状态: 已完成
            描述: 支持用户确认告警
            实现逻辑: 接收确认请求 -> 更新状态 -> 记录确认人
            相关文件: 
              - apps/backend/src/devices/device.controller.ts
              - apps/backend/src/devices/device.service.ts
              - apps/frontend/src/lib/api/alertApi.ts
              - apps/frontend/src/hooks/useAlerts.ts
              - apps/frontend/src/app/alerts/page.tsx
              - apps/frontend/src/components/alerts/
            验收标准: 
            - 支持批量确认告警，单次最多确认100条告警记录
            - 确认时必须填写处理意见，最少10个字符，支持500字以内描述
            - 记录确认人信息：用户ID、用户名、确认时间、处理意见
            - 状态流转：未确认 -> 已确认 -> 处理中 -> 已解决，每个状态变更都有记录
            - 确认操作响应时间 < 200ms，支持并发100个用户同时确认
            - 提供确认操作日志，可查询历史确认记录和处理过程
            - 确认后实时更新前端展示状态，无需手动刷新页面
            更新方式: 已完成任务，编辑 TODO.todo 将 [ ] 改为 [x]，并在变更日志中记录

        ✔ 创建告警解决流程
            状态: 已完成
            描述: 支持告警解决和关闭
            实现逻辑: 接收解决请求 -> 更新状态 -> 关闭通知
            相关文件: apps/backend/src/devices
            验收标准: 
            - 支持单条和批量解决告警，单次最多解决50条告警
            - 解决时必须选择解决方案类型：已修复、误报、重复告警、已忽略
            - 必须填写解决说明，最少20个字符，支持1000字以内详细描述
            - 自动关闭相关通知：邮件、短信、Webhook通知全部停止
            - 记录解决人信息：用户ID、用户名、解决时间、解决方案类型、解决说明
            - 状态验证：只允许"已确认"和"处理中"状态的告警标记为"已解决"
            - 解决后生成解决报告，包含告警详情、处理过程、解决时间统计
            更新方式: 完成任务后，编辑 TODO.todo 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 实现告警通知机制
            状态: 未开始
            描述: 支持多种通知方式
            实现逻辑: 告警触发时发送邮件、短信或 Webhook
            相关文件: apps/backend/src/devices
            验收标准: 
            - 支持三种通知方式：邮件（SMTP）、短信（阿里云SMS）、Webhook（HTTP POST）
            - 通知配置：支持按告警级别设置不同通知方式，支持通知频率限制
            - 邮件通知：支持自定义模板，包含告警详情、设备信息、处理链接
            - 短信通知：70字以内简洁信息，包含设备名称、告警级别、处理链接短网址
            - Webhook通知：JSON格式，包含完整告警信息，支持自定义Header和认证
            - 通知成功率 > 99%，失败时自动重试3次，支持失败告警
            - 通知记录：保存通知历史，可查询通知状态、内容、发送时间、接收人
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[指标数据] -->|触发| B[告警规则引擎]
                B -->|评估| C[告警条件]
                C -->|生成告警| D[告警创建逻辑]
                D -->|存储| E[告警记录表]
                E -->|通知| F[告警通知服务]
                E -->|查询/更新| G[告警查询API]
                G -->|展示| H[前端告警页面]
                F -->|发送通知| I[用户接收通知]

阶段四：用户体验优化 [40% 完成]
    UI 组件库 🟡
        ✔ 创建基础 UI 组件
            状态: 已完成
            描述: 实现 Button、Card、Input 等组件
            实现逻辑: 基于 shadcn/ui 和 tailwindcss 实现可复用组件
            相关文件: apps/frontend/src/components/ui, packages/ui
            验收标准: 组件可复用，样式一致
            更新方式: 无需进一步更新，已完成

        ☐ 实现数据表格组件
            状态: 未开始
            描述: 支持排序和分页的表格组件
            实现逻辑: 接收数据 -> 渲染表格 -> 支持排序和分页
            相关文件: apps/frontend/src/components/ui
            验收标准: 
            - 支持多列排序，点击列头切换升序/降序，显示排序图标指示
            - 分页选项：每页10、20、50、100条记录可选，显示总记录数和总页数
            - 行选择：支持单选、多选、全选，选中行高亮显示，支持Shift键连续选择
            - 表格响应式设计：适配不同屏幕尺寸，移动端支持横向滑动
            - 排序性能：1000条数据本地排序时间 < 100ms，服务器排序响应 < 300ms
            - 支持列宽调整、列显示/隐藏、列冻结（固定列）功能
            - 提供表格导出功能：支持CSV、Excel格式导出当前筛选结果
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 添加图表组件集成
            状态: 未开始
            描述: 集成第三方图表库
            实现逻辑: 封装通用图表组件 -> 支持多种图表类型
            相关文件: apps/frontend/src/components/ui
            验收标准: 
            - 集成ECharts图表库，支持折线图、柱状图、饼图、散点图、仪表盘等8种图表类型
            - 图表配置：支持自定义颜色、标题、图例、坐标轴、数据标签、提示框
            - 响应式设计：图表自动适配容器大小，支持窗口resize事件重新渲染
            - 交互功能：支持数据缩放、数据点悬停显示详情、图例点击切换数据系列
            - 性能优化：1000个数据点渲染时间 < 500ms，支持数据懒加载和虚拟滚动
            - 导出功能：支持PNG、JPG、SVG格式导出，支持数据视图和表格切换
            - 主题支持：内置亮色/暗色主题，支持自定义主题配置
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 创建模态框组件
            状态: 未开始
            描述: 实现通用模态框
            实现逻辑: 提供显示/隐藏功能 -> 支持自定义内容
            相关文件: apps/frontend/src/components/ui
            验收标准: 
            - 支持三种尺寸：小(400px)、中(600px)、大(800px)，高度最大80vh
            - 提供标准按钮：确认（primary）、取消（secondary）、关闭（X图标）
            - 键盘支持：ESC关闭、Enter确认、Tab键焦点循环、Shift+Tab反向循环
            - 动画效果：淡入淡出300ms，缩放效果从中心展开，支持禁用动画
            - 背景遮罩：半透明黑色背景，点击遮罩可关闭（可配置），防止背景滚动
            - 可访问性：支持aria-label、role="dialog"、aria-modal="true"、focus-trap
            - 响应式：移动端全屏显示，支持手势下滑关闭（iOS风格）
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 实现通知 Toast 组件
            状态: 未开始
            描述: 实现通知系统
            实现逻辑: 支持成功、错误等通知 -> 自动/手动关闭
            相关文件: apps/frontend/src/components/ui
            验收标准: 
            - 支持四种通知类型：success(绿色)、error(红色)、warning(黄色)、info(蓝色)
            - 显示位置：右上角、右下角、顶部居中可选，支持移动端底部显示
            - 自动关闭时间：success 3秒、error 5秒、warning 4秒、info 3秒，支持手动关闭
            - 队列管理：最多同时显示5条，超出时先进先出，支持优先级插队
            - 动画效果：滑入滑出300ms，支持透明度渐变，移动端支持上滑手势关闭
            - 内容格式：支持标题+内容、纯文本、HTML内容，最大宽度400px
            - 操作按钮：支持撤销、重试、查看详情等自定义操作按钮
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[前端页面组件] -->|使用| B[UI组件库]
                B -->|基于| C[shadcn/ui组件]
                C -->|样式支持| D[tailwindcss]

    响应式设计 🟡
        ☐ 优化移动端布局
            状态: 未开始
            描述: 适配小屏幕设备
            实现逻辑: 检测屏幕尺寸 -> 应用移动端样式 -> 优化交互
            相关文件: apps/frontend/src/app/**/*.tsx
            验收标准: 
            - 支持断点：xs(<576px)、sm(≥576px)、md(≥768px)、lg(≥992px)、xl(≥1200px)
            - 移动端优先：采用移动优先设计，所有组件在320px宽度下正常显示
            - 触摸目标：按钮最小44×44px，链接最小44×44px，符合WCAG 2.1标准
            - 手势支持：左滑删除、右滑编辑、下拉刷新、上拉加载更多
            - 性能优化：移动端首屏加载时间 < 3秒，支持离线缓存
            - 横竖屏适配：支持设备旋转，布局自动调整，字体大小响应式
            - 触摸反馈：按钮点击有视觉反馈（涟漪效果），加载状态有骨架屏
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ✔ 添加页面加载状态
            状态: 已完成
            描述: 显示页面加载指示器
            实现逻辑: 数据加载时显示指示器 -> 加载完成隐藏
            相关文件: apps/frontend/src/app/**/*.tsx
            验收标准: 加载状态正确显示和隐藏
            更新方式: 无需进一步更新，已完成

        ☐ 实现错误边界处理
            状态: 未开始
            描述: 捕获和显示渲染错误
            实现逻辑: 创建错误边界组件 -> 显示错误页面 -> 提供恢复
            相关文件: apps/frontend/src/app
            验收标准: 
            - 错误边界覆盖范围：捕获所有React组件渲染错误、生命周期错误、子组件错误
            - 错误显示：显示友好的错误页面，包含错误图标、错误描述、建议操作、返回首页按钮
            - 错误日志：自动记录错误堆栈、组件树、用户操作路径、浏览器信息到日志服务
            - 恢复机制：提供"重试"按钮重新加载组件，"返回首页"导航到安全页面
            - 开发模式：开发环境显示详细错误堆栈，生产环境仅显示友好提示
            - 错误上报：生产环境错误自动上报到监控服务，包含用户ID、页面URL、错误时间
            - 性能影响：错误边界组件渲染时间 < 50ms，不影响正常用户体验
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 优化导航用户体验
            状态: 未开始
            描述: 改进导航栏和面包屑
            实现逻辑: 设计导航结构 -> 同步状态 -> 优化交互
            相关文件: apps/frontend/src/app
            验收标准: 
            - 主导航栏：包含Logo、仪表盘、设备管理、告警管理、用户设置5个主要入口
            - 面包屑导航：显示当前页面路径，支持点击返回上级，最深支持4级嵌套
            - 活动状态指示：当前页面高亮显示，包含图标和文字状态同步
            - 响应式导航：移动端显示汉堡菜单，支持手势右滑打开侧边栏
            - 快捷键支持：全局快捷键导航，Cmd+K打开搜索，数字键1-5快速切换页面
            - 状态同步：URL参数与导航状态实时同步，刷新页面保持导航位置
            - 加载状态：页面切换时显示骨架屏，加载时间 < 500ms，提供取消加载选项
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 添加页面过渡动画
            状态: 未开始
            描述: 实现页面切换动画
            实现逻辑: 集成动画库 -> 添加切换和交互动画
            相关文件: apps/frontend/src/app
            验收标准: 
            - 页面切换动画：淡入淡出300ms、滑动从右到左400ms、缩放200ms，支持禁用
            - 交互动画：按钮悬停200ms、卡片展开250ms、加载骨架屏渐变1500ms
            - 性能优化：使用CSS transform和opacity，避免reflow，60fps流畅运行
            - 动画曲线：使用ease-in-out缓动函数，提供弹簧动画选项（tension:300,friction:30）
            - 移动端优化：减少动画时长50%，支持减少动画系统设置检测
            - 可访问性：支持prefers-reduced-motion媒体查询，为敏感用户提供简化动画
            - 内存管理：动画结束后自动清理，防止内存泄漏，支持动画取消和清理
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[浏览器/设备] -->|屏幕尺寸| B[响应式设计系统]
                B -->|应用| C[前端组件]
                C -->|响应式类| D[tailwindcss]

阶段五：API 与数据流 [60% 完成]
    API 客户端 🟡
        ✔ 完善 API 请求封装
            状态: 已完成
            描述: 封装 HTTP 请求方法
            实现逻辑: 统一请求头 -> 提供拦截和响应处理
            相关文件: apps/frontend/src/lib/api.ts
            验收标准: API 调用简洁，请求头一致
            更新方式: 无需进一步更新，已完成

        ☐ 添加请求重试机制
            状态: 未开始
            描述: 自动重试失败请求
            实现逻辑: 使用指数退避算法 -> 限制重试次数
            相关文件: apps/frontend/src/lib/api.ts
            验收标准: 
            - 重试策略：指数退避算法，首次1秒，最大30秒，重试次数3次
            - 重试条件：网络错误、5xx服务器错误、429限流错误，不重试4xx客户端错误
            - 错误分类：网络超时、服务器错误、认证失败、限流，每种类型不同处理方式
            - 用户提示：重试时显示"连接中..."状态，失败后显示具体错误信息和重试按钮
            - 取消机制：支持用户主动取消重试，避免无限重试循环
            - 日志记录：记录每次重试的时间、错误码、响应时间，支持调试模式查看
            - 智能退避：根据错误类型调整退避时间，429错误按Retry-After头等待
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ✔ 实现错误统一处理
            状态: 已完成
            描述: 统一处理 API 错误
            实现逻辑: 捕获错误 -> 格式化信息 -> 记录日志
            相关文件: apps/frontend/src/lib/api.ts
            验收标准: 错误信息统一，日志记录完整
            更新方式: 无需进一步更新，已完成

        ✔ 添加请求取消功能
            状态: 已完成
            描述: 支持取消正在进行的请求
            实现逻辑: 提供取消令牌 -> 处理资源清理
            相关文件: apps/frontend/src/lib/api.ts
            验收标准: 
            - 取消令牌：基于AbortController实现，支持请求级别的细粒度取消
            - 取消场景：组件卸载、用户主动取消、页面跳转、重复请求自动取消前一个
            - 内存清理：请求取消后自动清理相关引用、事件监听器、定时器
            - 错误处理：取消的请求不触发错误提示，返回特定的取消错误类型
            - 并发控制：同一API的并发请求自动取消旧请求，避免竞态条件
            - 调试支持：开发模式下在控制台显示被取消的请求信息
            - 性能监控：监控取消请求的内存占用，确保取消后内存立即释放
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ✔ 优化 TypeScript 类型
            状态: 已完成
            描述: 为 API 定义类型
            实现逻辑: 定义请求和响应类型 -> 减少运行时错误
            相关文件: apps/frontend/src/lib/api.ts
            验收标准: 类型安全，编译无错误
            更新方式: 无需进一步更新，已完成

        模块关系图:
            graph TD
                A[前端页面组件] -->|调用| B[自定义Hooks]
                B -->|使用| C[API客户端]
                C -->|HTTP请求| D[后端API服务]
                D -->|处理业务逻辑| E[PrismaService]
                C -->|封装HTTP操作| F[TypeScript类型]

    状态管理 🟡
        ✔ 完善 useAuth hook
            状态: 已完成
            描述: 管理用户认证状态
            实现逻辑: 提供登录/登出 -> 处理令牌存储和刷新
            相关文件: apps/frontend/src/hooks
            验收标准: 认证状态正确管理，方法正常
            更新方式: 无需进一步更新，已完成

        ✔ 实现 useDevices hook
            状态: 已完成
            描述: 管理设备数据状态
            实现逻辑: 提供数据获取和操作方法
            相关文件: apps/frontend/src/hooks
            验收标准: 设备数据正确更新，操作正常
            更新方式: 无需进一步更新，已完成

        ✔ 创建 useAlerts hook
            状态: 已完成
            描述: 管理告警数据状态
            实现逻辑: 提供告警数据获取和操作方法
            相关文件: apps/frontend/src/hooks
            验收标准: 告警数据正确管理，操作正常
            更新方式: 无需进一步更新，已完成

        ☐ 添加 useMetrics hook
            状态: 未开始
            描述: 管理指标数据状态
            实现逻辑: 提供数据获取和订阅方法 -> 优化缓存
            相关文件: apps/frontend/src/hooks
            验收标准: 
            - 实时更新：WebSocket连接，数据延迟 < 1秒，断线自动重连
            - 缓存策略：本地内存缓存+IndexedDB持久化，缓存有效期5分钟
            - 数据同步：后台数据更新时，前端缓存自动失效并重新获取
            - 性能优化：增量更新只传输变化数据，减少带宽占用90%
            - 分页缓存：支持分页数据的独立缓存，翻页时优先使用缓存
            - 内存管理：缓存大小限制100MB，超出时LRU算法清理旧数据
            - 离线支持：网络断开时显示最后缓存数据，重连后自动同步

            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 实现数据缓存策略
            状态: 未开始
            描述: 优化数据获取性能
            实现逻辑: 设计缓存机制 -> 处理更新和失效
            相关文件: apps/frontend/src/hooks
            验收标准: 
            - 缓存层级：L1内存缓存(50ms)、L2 IndexedDB缓存(100ms)、L3网络请求(500ms)
            - 缓存命中率：静态资源>95%，API数据>80%，用户会话数据>90%
            - 缓存失效：基于时间(TTL)、事件驱动、手动失效三种策略
            - 性能提升：缓存命中时响应时间减少80%，整体页面加载时间减少60%
            - 缓存监控：提供缓存命中率、失效率、清理频率的实时监控
            - 缓存一致性：采用最终一致性模型，最大延迟容忍30秒
            - 缓存预热：关键页面数据预加载，用户访问前提前缓存
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[前端组件] -->|使用| B[自定义Hooks]
                B -->|管理状态| C[React状态管理]
                C -->|状态更新| D[API客户端]
                D -->|数据获取| E[后端服务]

阶段六：后端服务完善 [50% 完成]
    数据库服务 🟡
        ✔ 优化 Prisma 服务配置
            状态: 已完成
            描述: 配置 Prisma 客户端
            实现逻辑: 优化数据库连接 -> 提供服务接口
            相关文件: apps/backend/src/prisma
            验收标准: 数据库连接稳定，性能优化
            更新方式: 无需进一步更新，已完成

        ☐ 添加数据库事务处理
            状态: 进行中
            描述: 支持数据库事务
            实现逻辑: 实现事务管理器 -> 支持回滚 -> 优化性能
            相关文件: apps/backend/src/prisma
            验收标准: 
            - 事务隔离级别：默认使用READ COMMITTED，关键业务使用REPEATABLE READ
            - 事务超时：单个事务最大执行时间30秒，超时自动回滚并记录日志
            - 死锁检测：自动检测和解决死锁，重试机制最多3次，死锁日志详细记录
            - 数据一致性：事务回滚后数据状态100%还原，无脏数据残留
            - 事务范围：设备批量操作、告警状态更新、用户权限变更等关键操作使用事务
            - 性能监控：事务执行时间、锁等待时间、回滚频率的实时监控和报警
            - 补偿机制：事务失败时提供业务补偿操作，确保业务流程完整性
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ✔ 实现数据验证中间件
            状态: 已完成
            描述: 验证请求数据
            实现逻辑: 检查数据格式 -> 防止无效数据
            相关文件: apps/backend/src/prisma
            验收标准: 无效数据被拦截，错误信息清晰
            更新方式: 无需进一步更新，已完成

        ☐ 创建数据种子脚本
            状态: 未开始
            描述: 初始化数据库数据
            实现逻辑: 定义种子数据 -> 支持环境区分
            相关文件: apps/backend/src/prisma
            验收标准: 
            - 初始化时间：完整开发环境初始化 < 60秒，包含数据库、测试数据、依赖安装
            - 测试数据集：自动生成10个设备、100条指标数据、20条告警数据，数据真实有效
            - 环境区分：开发、测试、生产三套独立配置，支持环境变量快速切换
            - 一键脚本：提供npm run seed命令，支持参数化配置数据量和数据类型
            - 数据清理：支持安全清理测试数据，不影响系统表和配置数据
            - 数据验证：初始化后自动验证数据完整性和外键关联正确性
            - 回滚机制：初始化失败时自动清理已创建数据，保证数据库状态一致性
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 添加数据库迁移脚本
            状态: 未开始
            描述: 管理数据库模式变更
            实现逻辑: 使用 Prisma Migrate -> 支持回滚
            相关文件: apps/backend/src/prisma
            验收标准: 迁移无错误，回滚正常
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[后端服务层] -->|调用| B[PrismaService]
                B -->|操作| C[数据验证中间件]
                C -->|保证数据| D[数据库]
                D -->|Prisma ORM| E[schema.prisma]
                E -->|操作| F[数据种子/迁移脚本]

阶段七：安全增强 [70% 完成]
        ✔ 完善安全中间件
            状态: 已完成
            描述: 添加安全头和过滤机制
            实现逻辑: 添加安全头 -> 防止 Web 攻击 -> 记录日志
            相关文件: apps/backend/src/security
            验收标准: 安全头生效，恶意请求被拦截
            更新方式: 无需进一步更新，已完成

        ☐ 添加速率限制
            状态: 进行中
            描述: 控制请求频率
            实现逻辑: 使用 express-rate-limit -> 限制 IP 请求
            相关文件: apps/backend/src/security
            验收标准: 请求频率受限，配置灵活
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ✔ 实现输入验证
            状态: 已完成
            描述: 验证请求参数
            实现逻辑: 检查数据类型和格式 -> 防止恶意输入
            相关文件: apps/backend/src/security
            验收标准: 无效输入被拦截，错误信息清晰
            更新方式: 无需进一步更新，已完成

        ✔ 添加 CORS 配置
            状态: 已完成
            描述: 配置跨域资源共享
            实现逻辑: 限制来源和方法 -> 确保安全
            相关文件: apps/backend/src/security
            验收标准: 跨域请求按配置处理
            更新方式: 无需进一步更新，已完成

        ✔ 创建请求日志
            状态: 已完成
            描述: 记录请求和响应信息
            实现逻辑: 设计日志格式 -> 支持分析 -> 便于审计
            相关文件: apps/backend/src/security
            验收标准: 日志完整，分析工具可用
            更新方式: 无需进一步更新，已完成

        模块关系图:
            graph TD
                A[客户端请求] -->|请求| B[安全中间件层]
                B -->|验证/过滤| C[CORS配置]
                C -->|控制跨域| D[输入验证]
                D -->|保护| E[速率限制模块]
                E -->|限制请求频率| F[日志系统]
                F -->|安全审计| G[应用程序]

阶段八：测试与质量 [40% 完成]
    单元测试 🟡
        ✔ 编写认证服务测试
            状态: 已完成
            描述: 测试认证服务功能
            实现逻辑: 测试登录、注册、密码重置
            相关文件: apps/backend/src/**/*.spec.ts
            验收标准: 测试覆盖率达 80%
            更新方式: 无需进一步更新，已完成

        ☐ 添加设备服务测试
            状态: 未开始
            描述: 测试设备管理功能
            实现逻辑: 测试 CRUD 和状态管理
            相关文件: apps/backend/src/**/*.spec.ts
            验收标准: 测试覆盖率达 80%
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 实现工具函数测试
            状态: 未开始
            描述: 测试工具函数
            实现逻辑: 测试边界条件和异常情况
            相关文件: apps/backend/src/**/*.spec.ts
            验收标准: 工具函数测试通过
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 创建 API 端点测试
            状态: 未开始
            描述: 测试 API 端点
            实现逻辑: 测试认证和数据验证
            相关文件: apps/backend/src/**/*.spec.ts
            验收标准: API 功能正确
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

    E2E 测试 🟡
        ✔ 编写登录流程测试
            状态: 已完成
            描述: 测试完整登录流程
            实现逻辑: 测试正常登录、错误处理和登出
            相关文件: apps/backend/src/**/*.e2e-spec.ts
            验收标准: 登录流程无错误
            更新方式: 无需进一步更新，已完成

        ☐ 添加设备管理测试
            状态: 未开始
            描述: 测试设备管理流程
            实现逻辑: 测试 CRUD 和批量操作
            相关文件: apps/backend/src/**/*.e2e-spec.ts
            验收标准: 设备管理功能完整
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 实现监控功能测试
            状态: 未开始
            描述: 测试数据收集和告警
            实现逻辑: 测试数据收集、告警触发和通知
            相关文件: apps/backend/src/**/*.e2e-spec.ts
            验收标准: 监控系统正常工作
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 创建性能测试套件
            状态: 未开始
            描述: 测试系统性能
            实现逻辑: 测试并发请求和响应时间
            相关文件: apps/backend/src/**/*.e2e-spec.ts
>            验收标准: 
>            - 使用 Apache Bench 测试：ab -n 1000 -c 1000 http://localhost:3000/api/health
>            - 99% 请求响应时间 < 200ms，平均响应时间 < 100ms
>            - 错误率 < 0.1%，无 5xx 服务器错误
>            - 内存使用峰值 < 512MB，CPU 使用率峰值 < 80%
>            - 数据库连接池最大 20 连接，无连接泄漏
>            - 提供性能测试报告，包含响应时间分布图和错误率统计
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        模块关系图:
            graph TD
                A[测试框架] -->|执行| B[单元测试]
                B -->|验证| C[E2E测试]
                C -->|端到端测试| D[被测系统]
                D -->|性能评估| E[性能测试工具]
                E -->|生成| F[测试报告]

阶段九：部署与运维 [30% 完成]
    容器化 🟢
        ☐ 优化 Docker 配置文件
            状态: 进行中
            描述: 优化 Docker 构建
            实现逻辑: 减少镜像体积 -> 使用多阶段构建
            相关文件: docker/, docker-compose.yml
>            验收标准: 
>            - 后端镜像从 1.2GB 减少到 800MB 以下，减少 33%
>            - 前端镜像从 500MB 减少到 350MB 以下，减少 30%
>            - 使用多阶段构建，生产镜像仅包含必要文件
>            - 使用 Alpine Linux 作为基础镜像，减少系统依赖
>            - 提供镜像大小对比报告，包含优化前后体积对比
>            - 构建时间控制在 3 分钟内，支持并行构建
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 添加多阶段构建
            状态: 未开始
            描述: 分离开发和生产依赖
            实现逻辑: 划分构建阶段 -> 优化生产镜像
            相关文件: docker/
            验收标准: 生产镜像体积优化
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 创建开发环境配置
            状态: 未开始
            描述: 配置开发环境
            实现逻辑: 配置环境变量 -> 集成开发工具
            相关文件: docker-compose.yml
            验收标准: 开发环境支持热重载
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 完善生产环境配置
            状态: 未开始
            描述: 优化生产环境
            实现逻辑: 配置变量 -> 添加安全设置 -> 优化性能
            相关文件: docker-compose.yml
            验收标准: 生产环境稳定运行
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

    部署配置 🟢
        ☐ 优化 Railway 部署配置
            状态: 未开始
            描述: 优化后端部署
            实现逻辑: 配置环境变量 -> 优化构建 -> 添加健康检查
            相关文件: railway.json
            验收标准: 部署稳定，健康检查通过
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 完善 Vercel 部署设置
            状态: 未开始
            描述: 优化前端部署
            实现逻辑: 优化构建 -> 添加缓存 -> 实现预渲染
            相关文件: vercel.json
>            验收标准: 
>            - 使用 Lighthouse 测试，首页加载时间 < 1.5 秒（3G 网络模拟）
>            - 首次内容绘制（FCP）< 1 秒，最大内容绘制（LCP）< 1.5 秒
>            - 打包后 JavaScript 体积 < 500KB，CSS 体积 < 100KB
>            - 使用 Next.js 预渲染，支持静态生成（SSG）和服务端渲染（SSR）
>            - 图片使用 WebP 格式，支持懒加载和响应式图片
>            - 提供性能报告，包含 Core Web Vitals 指标
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 添加环境变量管理
            状态: 未开始
            描述: 管理环境变量
            实现逻辑: 设计变量结构 -> 保护敏感信息
            相关文件: railway.json, vercel.json
            验收标准: 环境变量安全配置
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 创建部署脚本
            状态: 未开始
            描述: 自动化部署流程
            实现逻辑: 编写脚本 -> 添加验证和回滚
            相关文件: scripts/
            验收标准: 部署自动化，验证通过
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

    项目文档 🟢
        ☐ 完善 API 文档
            状态: 未开始
            描述: 文档化 API 接口
            实现逻辑: 使用 OpenAPI 3.0 -> 提供在线文档和示例
            相关文件: docs/
            验收标准: API 文档完整，示例可运行
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 创建部署指南
            状态: 未开始
            描述: 编写部署步骤
            实现逻辑: 说明环境配置 -> 提供故障排除
            相关文件: docs/
            验收标准: 新人可按指南部署
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 编写开发文档
            状态: 未开始
            描述: 提供架构和贡献指南
            实现逻辑: 编写架构文档 -> 说明规范 -> 创建贡献指南
            相关文件: docs/
            验收标准: 文档支持团队协作
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

    维护脚本 🟢
        ☐ 添加数据库备份脚本
            状态: 未开始
            描述: 实现数据库备份
            实现逻辑: 备份数据 -> 提供恢复 -> 优化存储
            相关文件: scripts/
            验收标准: 备份和恢复正常
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 创建数据迁移工具
            状态: 未开始
            描述: 支持数据迁移
            实现逻辑: 设计迁移工具 -> 实现转换和验证
            相关文件: scripts/
            验收标准: 数据迁移无错误
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 实现日志分析脚本
            状态: 未开始
            描述: 分析系统日志
            实现逻辑: 解析日志 -> 统计分析 -> 检测异常
            相关文件: scripts/
            验收标准: 提供准确分析报告
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

        ☐ 添加监控检查脚本
            状态: 未开始
            描述: 检查服务健康
            实现逻辑: 检查健康状态 -> 监控性能 -> 发送通知
            相关文件: scripts/
            验收标准: 监控正常，通知准确
            更新方式: 完成任务后，编辑 TODO.md 将 [ ] 改为 [x]，并在变更日志中记录

数据库模式关系图
    erDiagram
        User ||--o{ Device : owns
        Device ||--o{ Metric : generates
        Device ||--o{ Alert : triggers
        DeviceGroup ||--o{ Device : contains
        User {
            int id PK
            string email
            string password
            string name
            string role
            boolean isActive
            datetime deletedAt
            datetime lastLoginAt
            int failedLoginAttempts
            datetime lockedUntil
            boolean mfaEnabled
            string mfaSecret
            datetime createdAt
            datetime updatedAt
            string passwordResetToken
            datetime passwordResetExpires
        }
        DeviceGroup {
            int id PK
            string name
            string description
            boolean isActive
            datetime createdAt
            datetime updatedAt
        }
        Device {
            int id PK
            string name
            string hostname
            string ipAddress
            string description
            string status
            string type
            string location
            string tags
            boolean isActive
            datetime createdAt
            datetime updatedAt
            datetime lastSeen
            int userId FK
            int deviceGroupId FK
        }
        Metric {
            int id PK
            int deviceId FK
            float cpu
            float memory
            float disk
            float networkIn
            float networkOut
            float uptime
            float temperature
            json custom
            datetime timestamp
        }
        Alert {
            int id PK
            int deviceId FK
            string type
            string message
            string severity
            boolean isResolved
            datetime resolvedAt
            datetime acknowledgedAt
            json metadata
            datetime createdAt
            datetime updatedAt
            int userId FK
        }

数据库模式说明:
    Metric 表: 为 deviceId 和 timestamp 添加索引，支持高效时间序列查询
    Alert 表: 为 createdAt 添加索引，优化最新告警排序

推荐开发顺序
    第一周：认证基础
        - 修复后端认证守卫
        - 完善前端登录功能
        - 实现令牌管理
        - 添加路由保护
        - 编写认证服务单元测试
        - 更新项目 README

    第二周：核心功能
        - 创建仪表盘页面
        - 实现设备列表
        - 添加设备操作
        - 完善数据展示
        - 编写设备服务单元测试

    第三周：用户体验与测试
        - 优化 UI 组件
        - 添加响应式设计
        - 实现加载状态和错误处理
        - 编写前端组件单元测试

    第四周：高级功能
        - 实现实时数据推送
        - 完善告警通知系统
        - 集成数据图表
        - 优化性能

优先级标记
    🔴 高优先级: 认证、核心功能
    🟡 中优先级: 用户体验、测试
    🟢 低优先级: 高级功能、文档、部署

变更日志:
    阶段三: 数据展示与处理
        - 2025-09-21: 实现告警查询接口，支持过滤、排序和分页功能

    阶段九: 部署与运维
        - 2025-09-22: 实现告警确认功能，支持告警确认和批量确认操作
