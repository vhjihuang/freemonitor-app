generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Device {
  id            String       @id @default(cuid())
  name          String
  hostname      String       @unique
  ipAddress     String       @unique
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  status        DeviceStatus @default(UNKNOWN)
  location      String?
  tags          String[]
  lastSeen      DateTime?
  userId        String?
  deviceGroupId String?
  type          DeviceType?
  alerts        Alert[]
  deviceGroup   DeviceGroup? @relation(fields: [deviceGroupId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])
  metrics       Metric[]
  metricHistory MetricHistory[]

  @@index([isActive])
  @@index([status])
  @@index([lastSeen])
  @@index([userId])
  @@index([deviceGroupId])
  @@index([ipAddress])
  @@index([hostname])
  @@map("devices")
}

model Metric {
  id          String   @id @default(cuid())
  deviceId    String
  cpu         Float
  memory      Float
  disk        Float
  timestamp   DateTime @default(now()) @db.Timestamptz(6)
  networkIn   Float?
  networkOut  Float?
  uptime      Int?
  temperature Float?
  custom      Json?
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
  @@index([timestamp])
  @@index([deviceId, timestamp, cpu])
  @@index([deviceId, timestamp, disk])
  @@index([deviceId, timestamp])
  @@index([deviceId, timestamp, memory])
  @@index([timestamp, deviceId])
  @@map("metrics")
}

model MetricHistory {
  id          String   @id @default(cuid())
  deviceId    String
  cpu         Float
  memory      Float
  disk        Float
  timestamp   DateTime @db.Timestamptz(6)
  networkIn   Float?
  networkOut  Float?
  uptime      Int?
  temperature Float?
  custom      Json?
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  aggregationLevel String? // 'raw' | 'minute' | 'hour' | 'day'

  @@index([deviceId])
  @@index([timestamp])
  @@index([deviceId, timestamp])
  @@index([aggregationLevel])
  @@map("metric_history")
}

model Alert {
  id                 String        @id @default(cuid())
  deviceId           String
  message            String
  createdAt          DateTime      @default(now())
  type               AlertType
  isResolved         Boolean       @default(false)
  resolvedAt         DateTime?
  acknowledgedAt     DateTime?
  metadata           Json?
  userId             String?
  updatedAt          DateTime      @updatedAt
  severity           AlertSeverity @default(ERROR)
  acknowledgeComment String?
  acknowledgedBy     String?
  status             AlertStatus   @default(UNACKNOWLEDGED)
  resolveComment     String?
  resolvedBy         String?
  solutionType       String?
  device             Device        @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  User               User?         @relation(fields: [userId], references: [id])

  @@index([deviceId])
  @@index([isResolved])
  @@index([severity])
  @@index([type])
  @@index([createdAt])
  @@index([resolvedAt])
  @@index([deviceId, isResolved])
  @@index([isResolved, severity, createdAt])
  @@index([type, isResolved])
  @@map("alerts")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([revoked])
  @@index([userId, revoked])
  @@index([token, revoked])
  @@map("refresh_tokens")
}

model User {
  id                     String         @id @default(cuid())
  email                  String         @unique
  password               String
  name                   String?
  role                   UserRole       @default(USER)
  isActive               Boolean        @default(true)
  lastLoginAt            DateTime?
  failedLoginAttempts    Int            @default(0)
  lockedUntil            DateTime?
  mfaEnabled             Boolean        @default(false)
  mfaSecret              String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  deletedAt              DateTime?
  passwordResetExpiresAt DateTime?
  passwordResetToken     String?        @unique
  createdAlerts          Alert[]
  devices                Device[]
  refreshTokens          RefreshToken[]

  @@index([email])
  @@index([isActive])
  @@index([role])
  @@index([lastLoginAt])
  @@index([lockedUntil])
  @@index([email, isActive])
  @@map("users")
}

model DeviceGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  devices     Device[]

  @@index([name])
  @@index([isActive])
  @@index([name, isActive])
  @@map("device_groups")
}

enum AlertStatus {
  UNACKNOWLEDGED
  ACKNOWLEDGED
  IN_PROGRESS
  RESOLVED
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  DEGRADED
  UNKNOWN
  MAINTENANCE
}

enum DeviceType {
  SERVER
  ROUTER
  IOT
}

enum AlertSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum AlertType {
  CPU
  MEMORY
  DISK
  NETWORK
  OFFLINE
  CUSTOM
}

enum UserRole {
  ADMIN
  USER
  OPERATOR
  VIEWER
}
