# docker/production/Dockerfile.backend
# 后端生产环境Dockerfile
# 构建阶段
FROM node:20-alpine AS builder

WORKDIR /app

# 启用 corepack
RUN corepack enable

# 复制根目录的配置文件
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY apps/backend/package.json ./apps/backend/
COPY packages/types/package.json ./packages/types/

# 安装所有依赖（包括 dev）
RUN pnpm install --frozen-lockfile

# 复制源码
COPY apps/backend ./apps/backend
COPY packages/types ./packages/types/

# 构建后端
RUN pnpm --filter backend build

# 生产阶段
FROM node:20-alpine AS production

WORKDIR /app

# 生产环境变量
ENV NODE_ENV=production
ENV PORT=3001

# 启用 corepack
RUN corepack enable

# 复制 package.json 和 lockfile
COPY --from=builder /app/apps/backend/package.json ./
COPY --from=builder /app/pnpm-lock.yaml ./

# 只安装生产依赖
RUN pnpm install --frozen-lockfile --prod

# 复制构建结果
COPY --from=builder /app/apps/backend/dist ./dist
COPY --from=builder /app/apps/backend/prisma ./prisma

# 生成 Prisma Client
RUN pnpm dlx prisma generate

# 创建非 root 用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /app

USER nextjs

# 暴露端口
EXPOSE 3001

# 健康检查
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD node -e "try { require('http').get('http://localhost:3001/api/health/live', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1)); } catch (e) { process.exit(1); }"

# 启动命令
CMD ["node", "dist/src/main"]