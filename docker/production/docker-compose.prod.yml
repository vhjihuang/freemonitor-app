# docker/production/docker-compose.prod.yml
version: '3.8'

services:
  # PostgreSQL 数据库
  database:
    image: postgres:16-alpine
    container_name: freemonitor-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-freemonitor}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - freemonitor-network
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: freemonitor-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - freemonitor-network
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # 后端 API 服务
  backend:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile.backend
    container_name: freemonitor-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@database:5432/${POSTGRES_DB:-freemonitor}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CSRF_SECRET: ${CSRF_SECRET}
      NODE_ENV: production
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - freemonitor-network
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # 前端 Web 服务
  frontend:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile.frontend
    container_name: freemonitor-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - freemonitor-network
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: freemonitor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl  # 部署时如果使用HTTPS，需要将SSL证书放在此目录下
    depends_on:
      - frontend
      - backend
    networks:
      - freemonitor-network
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  freemonitor-network:
    driver: bridge